/**
 * TESTES AUTOMATIZADOS - CORRE√á√ÉO DO BUG DE TEMPLATES
 * 
 * Este arquivo cont√©m testes para validar a corre√ß√£o do bug onde
 * inserir m√∫ltiplas vari√°veis causava perda de texto intermedi√°rio.
 */

interface TesteResultado {
  nome: string;
  descricao: string;
  esperado: string;
  obtido: string;
  sucesso: boolean;
}

/**
 * Simula a fun√ß√£o insertVariable corrigida para testes
 */
function simularInsercaoVariavel(
  conteudoAtual: string,
  posicaoCursor: number,
  variavel: string,
  eventoSelecionado: boolean = false,
  conteudoOriginal?: string
): string {
  const start = posicaoCursor;
  const end = posicaoCursor;
  
  let novoConteudo: string;
  
  if (eventoSelecionado && conteudoOriginal && conteudoOriginal !== conteudoAtual) {
    // Cen√°rio: H√° evento selecionado e conte√∫do foi substitu√≠do
    // Estrat√©gia: Inserir no final do conteudoOriginal para preservar todo o texto
    novoConteudo = conteudoOriginal + ' ' + variavel;
  } else {
    // Cen√°rio: N√£o h√° evento selecionado OU conte√∫do n√£o foi substitu√≠do
    novoConteudo = conteudoAtual.substring(0, start) + variavel + conteudoAtual.substring(end);
  }
  
  return novoConteudo;
}

/**
 * Executa os testes de corre√ß√£o do bug
 */
export async function executarTestesCorrecaoBug(): Promise<TesteResultado[]> {
  console.log('üß™ Iniciando testes de corre√ß√£o do bug de templates...');
  
  const resultados: TesteResultado[] = [];
  
  // Teste 1: Inser√ß√£o b√°sica sem evento selecionado
  try {
    const conteudo = 'Ol√° ';
    const resultado = simularInsercaoVariavel(conteudo, conteudo.length, '{nome_cliente}');
    const esperado = 'Ol√° {nome_cliente}';
    
    resultados.push({
      nome: 'Inser√ß√£o B√°sica',
      descricao: 'Inserir vari√°vel sem evento selecionado',
      esperado,
      obtido: resultado,
      sucesso: resultado === esperado
    });
    
    console.log('‚úÖ Teste 1 - Inser√ß√£o B√°sica:', resultado === esperado ? 'PASSOU' : 'FALHOU');
  } catch (error) {
    console.error('‚ùå Erro no Teste 1:', error);
    resultados.push({
      nome: 'Inser√ß√£o B√°sica',
      descricao: 'Inserir vari√°vel sem evento selecionado',
      esperado: 'Ol√° {nome_cliente}',
      obtido: 'ERRO: ' + String(error),
      sucesso: false
    });
  }
  
  // Teste 2: Preserva√ß√£o de texto com evento selecionado (cen√°rio do bug)
  try {
    const conteudoOriginal = 'Ol√° {nome_cliente} quando insiro uma vari√°vel de novo';
    const conteudoAtual = 'Ol√° Jo√£o quando insiro uma vari√°vel de novo'; // Substitu√≠do
    const resultado = simularInsercaoVariavel(
      conteudoAtual, 
      conteudoAtual.length, 
      '{valor_entrada}',
      true,
      conteudoOriginal
    );
    const esperado = 'Ol√° {nome_cliente} quando insiro uma vari√°vel de novo {valor_entrada}';
    
    resultados.push({
      nome: 'Preserva√ß√£o de Texto',
      descricao: 'Manter texto digitado entre vari√°veis com evento selecionado',
      esperado,
      obtido: resultado,
      sucesso: resultado === esperado
    });
    
    console.log('‚úÖ Teste 2 - Preserva√ß√£o de Texto:', resultado === esperado ? 'PASSOU' : 'FALHOU');
  } catch (error) {
    console.error('‚ùå Erro no Teste 2:', error);
    resultados.push({
      nome: 'Preserva√ß√£o de Texto',
      descricao: 'Manter texto digitado entre vari√°veis com evento selecionado',
      esperado: 'Ol√° {nome_cliente} quando insiro uma vari√°vel de novo {valor_entrada}',
      obtido: 'ERRO: ' + String(error),
      sucesso: false
    });
  }
  
  // Teste 3: M√∫ltiplas inser√ß√µes consecutivas
  try {
    let conteudo = 'Evento: ';
    conteudo = simularInsercaoVariavel(conteudo, conteudo.length, '{nome_cliente}');
    conteudo = simularInsercaoVariavel(conteudo, conteudo.length, ' em ');
    conteudo = simularInsercaoVariavel(conteudo, conteudo.length, '{data_evento}');
    conteudo = simularInsercaoVariavel(conteudo, conteudo.length, ' com entrada de ');
    conteudo = simularInsercaoVariavel(conteudo, conteudo.length, '{valor_entrada}');
    
    const esperado = 'Evento: {nome_cliente} em {data_evento} com entrada de {valor_entrada}';
    
    resultados.push({
      nome: 'M√∫ltiplas Inser√ß√µes',
      descricao: 'Inserir v√°rias vari√°veis consecutivamente',
      esperado,
      obtido: conteudo,
      sucesso: conteudo === esperado
    });
    
    console.log('‚úÖ Teste 3 - M√∫ltiplas Inser√ß√µes:', conteudo === esperado ? 'PASSOU' : 'FALHOU');
  } catch (error) {
    console.error('‚ùå Erro no Teste 3:', error);
    resultados.push({
      nome: 'M√∫ltiplas Inser√ß√µes',
      descricao: 'Inserir v√°rias vari√°veis consecutivamente',
      esperado: 'Evento: {nome_cliente} em {data_evento} com entrada de {valor_entrada}',
      obtido: 'ERRO: ' + String(error),
      sucesso: false
    });
  }
  
  // Resumo dos testes
  const totalTestes = resultados.length;
  const testesPassaram = resultados.filter(r => r.sucesso).length;
  const testesFalharam = totalTestes - testesPassaram;
  
  console.log('\nüìä RESUMO DOS TESTES:');
  console.log(`Total: ${totalTestes}`);
  console.log(`‚úÖ Passaram: ${testesPassaram}`);
  console.log(`‚ùå Falharam: ${testesFalharam}`);
  console.log(`üìà Taxa de Sucesso: ${((testesPassaram / totalTestes) * 100).toFixed(1)}%`);
  
  if (testesFalharam === 0) {
    console.log('üéâ Todos os testes passaram! A corre√ß√£o est√° funcionando corretamente.');
  } else {
    console.log('‚ö†Ô∏è Alguns testes falharam. Verifique a implementa√ß√£o.');
  }
  
  return resultados;
}

/**
 * Fun√ß√£o de conveni√™ncia para executar testes no console
 */
export function rodarTestes() {
  executarTestesCorrecaoBug()
    .then(resultados => {
      console.log('Testes conclu√≠dos:', resultados);
    })
    .catch(error => {
      console.error('Erro ao executar testes:', error);
    });
}

// Exportar para uso em outros arquivos
export default {
  executarTestesCorrecaoBug,
  rodarTestes
};