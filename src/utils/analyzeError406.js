/**
 * An√°lise do Erro HTTP 406 (Not Acceptable)
 * URL: https://adxwgpfkvizpqdvortpu.supabase.co/rest/v1/agenda_eventos?select=id%2‚Ä¶ente&cpf_cliente=eq.705.978.501-94&titulo=eq.Yasmine+Gon%C3%A7alves+Vieira
 */

// 1. AN√ÅLISE DA URL E ENCODING
// URL original do erro (com caracteres problem√°ticos)
const urlOriginalComErro = 'https://adxwgpfkvizpqdvortpu.supabase.co/rest/v1/agenda_eventos?select=id%2‚Ä¶ente&cpf_cliente=eq.705.978.501-94&titulo=eq.Yasmine+Gon%C3%A7alves+Vieira';

// URL corrigida para an√°lise (removendo os caracteres problem√°ticos %2‚Ä¶)
const urlProblematica = 'https://adxwgpfkvizpqdvortpu.supabase.co/rest/v1/agenda_eventos?select=id,cpf_cliente&cpf_cliente=eq.705.978.501-94&titulo=eq.Yasmine+Gon%C3%A7alves+Vieira';

// Analisar o problema na URL original
console.log('üö® PROBLEMA IDENTIFICADO NA URL:');
console.log('URL Original (com erro):', urlOriginalComErro);
console.log('Problema: Caracteres %2‚Ä¶ s√£o inv√°lidos');
console.log('Poss√≠vel causa: Truncamento ou encoding incorreto do par√¢metro select');

// Decodificar a URL corrigida para an√°lise
let urlDecodificada;
try {
  urlDecodificada = decodeURIComponent(urlProblematica);
  console.log('\n‚úÖ URL Corrigida decodificada com sucesso');
} catch (error) {
  console.log('\n‚ùå Erro ao decodificar URL:', error.message);
  urlDecodificada = 'ERRO DE DECODIFICA√á√ÉO';
}
console.log('üîç AN√ÅLISE DA URL PROBLEM√ÅTICA:');
console.log('URL Original:', urlProblematica);
console.log('URL Decodificada:', urlDecodificada);

// Analisar os par√¢metros espec√≠ficos
const parametros = {
  cpf_cliente: '705.978.501-94',
  titulo: 'Yasmine Gon√ßalves Vieira' // %C3%A7 = √ß em UTF-8
};

console.log('\nüìã PAR√ÇMETROS DECODIFICADOS:');
console.log('CPF:', parametros.cpf_cliente);
console.log('T√≠tulo:', parametros.titulo);
console.log('Encoding do √ß:', '%C3%A7');

// 2. AN√ÅLISE DO ENCODING UTF-8
const caracteresEspeciais = {
  '√ß': '%C3%A7',
  '√£': '%C3%A3',
  '√µ': '%C3%B5',
  '√°': '%C3%A1',
  '√©': '%C3%A9',
  '√≠': '%C3%AD',
  '√≥': '%C3%B3',
  '√∫': '%C3%BA'
};

console.log('\nüî§ MAPEAMENTO DE CARACTERES ESPECIAIS:');
Object.entries(caracteresEspeciais).forEach(([char, encoded]) => {
  console.log(`${char} ‚Üí ${encoded}`);
});

// 3. VERIFICAR SE O ENCODING EST√Å CORRETO
const nomeOriginal = 'Yasmine Gon√ßalves Vieira';
const nomeEncodado = encodeURIComponent(nomeOriginal);
const nomeDecodificado = decodeURIComponent(nomeEncodado);

console.log('\n‚úÖ VERIFICA√á√ÉO DE ENCODING:');
console.log('Nome Original:', nomeOriginal);
console.log('Nome Encodado:', nomeEncodado);
console.log('Nome Decodificado:', nomeDecodificado);
console.log('Encoding Correto:', nomeOriginal === nomeDecodificado ? '‚úÖ SIM' : '‚ùå N√ÉO');

// 4. AN√ÅLISE DOS HEADERS ESPERADOS PELO SUPABASE
const headersSupabaseEsperados = {
  'Accept': 'application/json',
  'Content-Type': 'application/json',
  'apikey': '[REDACTED]',
  'Authorization': '[REDACTED]'
};

console.log('\nüì° HEADERS ESPERADOS PELO SUPABASE:');
Object.entries(headersSupabaseEsperados).forEach(([header, value]) => {
  console.log(`${header}: ${value}`);
});

// 5. POSS√çVEIS CAUSAS DO ERRO 406
const possiveisCausas = [
  {
    causa: 'Header Accept incorreto',
    descricao: 'Supabase espera application/json, mas pode estar recebendo text/html',
    probabilidade: 'ALTA',
    evidencia: 'testClienteAccess.ts usa Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'
  },
  {
    causa: 'Encoding de caracteres especiais',
    descricao: 'Caracteres especiais como √ß podem estar mal encodados',
    probabilidade: 'M√âDIA',
    evidencia: '%C3%A7 √© encoding UTF-8 correto para √ß'
  },
  {
    causa: 'Headers de seguran√ßa CSP',
    descricao: 'Content-Security-Policy pode estar bloqueando a requisi√ß√£o',
    probabilidade: 'BAIXA',
    evidencia: 'CSP permite connect-src para *.supabase.co'
  },
  {
    causa: 'Interceptador fetch modificando headers',
    descricao: 'apiMonitoring.ts pode estar interferindo nos headers',
    probabilidade: 'BAIXA',
    evidencia: 'Interceptador apenas monitora, n√£o modifica headers'
  }
];

console.log('\nüö® POSS√çVEIS CAUSAS DO ERRO 406:');
possiveisCausas.forEach((item, index) => {
  console.log(`\n${index + 1}. ${item.causa} (${item.probabilidade})`);
  console.log(`   Descri√ß√£o: ${item.descricao}`);
  console.log(`   Evid√™ncia: ${item.evidencia}`);
});

// 6. RECOMENDA√á√ïES PARA CORRE√á√ÉO
const recomendacoes = [
  'Verificar se o cliente Supabase est√° enviando Accept: application/json',
  'Confirmar que n√£o h√° override de headers em interceptadores',
  'Testar a mesma requisi√ß√£o em diferentes navegadores/sistemas',
  'Verificar logs do Supabase para detalhes do erro 406',
  'Validar se RLS policies est√£o configuradas corretamente'
];

console.log('\nüí° RECOMENDA√á√ïES:');
recomendacoes.forEach((rec, index) => {
  console.log(`${index + 1}. ${rec}`);
});

console.log('\nüéØ CONCLUS√ÉO DA AN√ÅLISE DE ENCODING:');
console.log('- O encoding UTF-8 est√° CORRETO (%C3%A7 = √ß)');
console.log('- A URL est√° bem formada');
console.log('- O problema N√ÉO √© o encoding de caracteres especiais');
console.log('- Foco deve ser nos HEADERS da requisi√ß√£o');
console.log('\nüîç DESCOBERTA CR√çTICA:');
console.log('- A URL original cont√©m caracteres inv√°lidos: %2‚Ä¶');
console.log('- Isso indica TRUNCAMENTO na constru√ß√£o da query string');
console.log('- O par√¢metro select pode estar sendo mal formado');
console.log('- CAUSA PROV√ÅVEL: Problema na constru√ß√£o da URL, n√£o nos headers');