// Script espec√≠fico para corrigir a inconsist√™ncia no card Frederico
// Execute usando: node src/scripts/fix-frederico-card.mjs

import { createClient } from '@supabase/supabase-js';
import { v4 as uuidv4 } from 'uuid';
import dotenv from 'dotenv';
import { fileURLToPath } from 'url';
import { dirname, resolve } from 'path';
import fs from 'fs';

// Configurar dotenv
dotenv.config();

// Obter diret√≥rio atual
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// Inicializar cliente Supabase
const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY;

// Para depura√ß√£o - verificar se as vari√°veis de ambiente est√£o dispon√≠veis
if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Vari√°veis de ambiente n√£o encontradas!');
  
  // Tentar carregar manualmente do arquivo .env
  try {
    const envPath = resolve(dirname(__dirname), '../.env');
    console.log(`üìÇ Tentando carregar vari√°veis do arquivo: ${envPath}`);
    
    const envContent = fs.readFileSync(envPath, 'utf8');
    const envVars = envContent.split('\n').reduce((acc, line) => {
      const match = line.match(/^([^=]+)=(.*)$/);
      if (match) {
        acc[match[1]] = match[2].replace(/^['"](.*)['"]$/, '$1');
      }
      return acc;
    }, {});
    
    if (envVars.VITE_SUPABASE_URL && envVars.VITE_SUPABASE_ANON_KEY) {
      console.log('‚úÖ Vari√°veis carregadas manualmente com sucesso!');
      process.env.VITE_SUPABASE_URL = envVars.VITE_SUPABASE_URL;
      process.env.VITE_SUPABASE_ANON_KEY = envVars.VITE_SUPABASE_ANON_KEY;
    }
  } catch (e) {
    console.error(`‚ùå Falha ao carregar .env manualmente: ${e.message}`);
  }
}

// Confirmar se temos as vari√°veis ap√≥s a tentativa de carregamento manual
if (!process.env.VITE_SUPABASE_URL || !process.env.VITE_SUPABASE_ANON_KEY) {
  console.error('‚ùå ERRO: As vari√°veis de ambiente VITE_SUPABASE_URL e VITE_SUPABASE_ANON_KEY s√£o necess√°rias.');
  console.error('Por favor, crie um arquivo .env na raiz do projeto com essas vari√°veis.');
  process.exit(1);
}

const supabase = createClient(process.env.VITE_SUPABASE_URL, process.env.VITE_SUPABASE_ANON_KEY);

// Configura√ß√µes espec√≠ficas para o card Frederico
const FREDERICO_EVENTO_ID = '7f1492dd-cab8-4b9c-9025-38260f0e95a2'; // Substitua pelo ID real do evento Frederico
const VALOR_CORRETO = 1000.00;  // Valor correto que deve constar na entrada (R$ 1.000,00)

// Fun√ß√£o para extrair valores financeiros de texto de observa√ß√µes
const extrairValoresFinanceiros = (observacoes) => {
  if (!observacoes) {
    return { totalValue: 0, downPayment: 0, remainingValue: 0, notes: '' };
  }

  const valorTotalMatch = observacoes.match(/Valor Total: R\$(\d+(\.\d+)?)/);
  const entradaMatch = observacoes.match(/Entrada: R\$(\d+(\.\d+)?)/);
  const valorRestanteMatch = observacoes.match(/Valor Restante: R\$(\d+(\.\d+)?)/);

  const totalValue = valorTotalMatch ? parseFloat(valorTotalMatch[1]) : 0;
  const downPayment = entradaMatch ? parseFloat(entradaMatch[1]) : 0;
  const remainingValue = valorRestanteMatch ? parseFloat(valorRestanteMatch[1]) : 0;

  // Remove as linhas de valores das observa√ß√µes para obter apenas as notas
  const notes = observacoes
    .replace(/Valor Total: R\$\d+(\.\d+)?(\n|$)/, '')
    .replace(/Entrada: R\$\d+(\.\d+)?(\n|$)/, '')
    .replace(/Valor Restante: R\$\d+(\.\d+)?(\n|$)/, '')
    .trim();

  return { totalValue, downPayment, remainingValue, notes };
};

// Fun√ß√£o principal para corrigir o evento Frederico
async function corrigirEventoFrederico() {
  console.log('üîß Iniciando corre√ß√£o do card Frederico...');
  
  try {
    // 1. Buscar o evento Frederico
    console.log(`üîç Buscando evento com ID: ${FREDERICO_EVENTO_ID}`);
    
    const { data: evento, error: erroEvento } = await supabase
      .from('agenda_eventos')
      .select('*')
      .eq('id', FREDERICO_EVENTO_ID)
      .single();
    
    if (erroEvento) {
      console.error('‚ùå Erro ao buscar evento Frederico:', erroEvento.message);
      return;
    }
    
    console.log(`‚úÖ Evento encontrado: ${evento.titulo}`);
    console.log(`üìù Observa√ß√µes: ${evento.observacoes}`);
    
    // 2. Extrair valores financeiros atuais
    const valoresEvento = extrairValoresFinanceiros(evento.observacoes);
    console.log('üìä Valores atuais no evento:');
    console.log(`   - Valor Total: R$ ${valoresEvento.totalValue.toFixed(2)}`);
    console.log(`   - Entrada: R$ ${valoresEvento.downPayment.toFixed(2)}`);
    console.log(`   - Valor Restante: R$ ${valoresEvento.remainingValue.toFixed(2)}`);
    
    // 3. Verificar se os valores correspondem ao esperado
    if (valoresEvento.downPayment !== VALOR_CORRETO) {
      console.log(`‚ö†Ô∏è Valor incorreto detectado (${valoresEvento.downPayment}). Atualizando observa√ß√µes do evento...`);
      
      // Calcular o novo valor restante
      const novoValorRestante = valoresEvento.totalValue - VALOR_CORRETO;
      
      // Atualizar observa√ß√µes com valores corretos
      const novasObservacoes = `Valor Total: R$${valoresEvento.totalValue}
Entrada: R$${VALOR_CORRETO}
Valor Restante: R$${novoValorRestante}
${valoresEvento.notes}`;
      
      // Atualizar o evento
      const { error: erroAtualizacaoEvento } = await supabase
        .from('agenda_eventos')
        .update({ 
          observacoes: novasObservacoes,
          atualizado_em: new Date().toISOString()
        })
        .eq('id', FREDERICO_EVENTO_ID);
      
      if (erroAtualizacaoEvento) {
        console.error('‚ùå Erro ao atualizar observa√ß√µes do evento:', erroAtualizacaoEvento.message);
      } else {
        console.log('‚úÖ Observa√ß√µes do evento atualizadas com sucesso!');
      }
    } else {
      console.log('‚úÖ Valor de entrada no evento j√° est√° correto!');
    }
    
    // 4. Buscar transa√ß√µes financeiras relacionadas a este evento
    console.log('\nüîç Buscando transa√ß√µes financeiras relacionadas...');
    
    const { data: transacoes, error: erroTransacoes } = await supabase
      .from('financeiro_transacoes')
      .select('*')
      .eq('categoria', 'Entrada de Evento')
      .ilike('observacoes', `%${FREDERICO_EVENTO_ID}%`);
    
    if (erroTransacoes) {
      console.error('‚ùå Erro ao buscar transa√ß√µes:', erroTransacoes.message);
      return;
    }
    
    // 5. Verificar e corrigir transa√ß√µes
    if (!transacoes || transacoes.length === 0) {
      console.log('‚ö†Ô∏è N√£o foram encontradas transa√ß√µes financeiras para este evento. Criando uma nova...');
      
      // Criar nova transa√ß√£o
      await criarTransacaoCorreta(evento, VALOR_CORRETO);
    } else {
      console.log(`üìä Encontradas ${transacoes.length} transa√ß√µes relacionadas.`);
      
      if (transacoes.length === 1) {
        // Caso simples: apenas uma transa√ß√£o
        const transacao = transacoes[0];
        
        if (transacao.valor !== VALOR_CORRETO) {
          console.log(`‚ö†Ô∏è Valor da transa√ß√£o incorreto: R$ ${transacao.valor.toFixed(2)} (deve ser R$ ${VALOR_CORRETO.toFixed(2)})`);
          console.log('üîß Atualizando transa√ß√£o...');
          
          const { error: erroAtualizacao } = await supabase
            .from('financeiro_transacoes')
            .update({ 
              valor: VALOR_CORRETO,
              atualizado_em: new Date().toISOString()
            })
            .eq('id', transacao.id);
          
          if (erroAtualizacao) {
            console.error('‚ùå Erro ao atualizar transa√ß√£o:', erroAtualizacao.message);
          } else {
            console.log('‚úÖ Transa√ß√£o atualizada com sucesso!');
          }
        } else {
          console.log('‚úÖ Valor da transa√ß√£o j√° est√° correto!');
        }
      } else {
        // Caso complexo: m√∫ltiplas transa√ß√µes
        console.log('‚ö†Ô∏è M√∫ltiplas transa√ß√µes encontradas para o mesmo evento.');
        console.log('üîß Corrigindo para ter apenas uma transa√ß√£o...');
        
        // Ordenar por data de cria√ß√£o (mais recente primeiro)
        transacoes.sort((a, b) => new Date(b.criado_em) - new Date(a.criado_em));
        
        // Atualizar a transa√ß√£o mais recente
        const transacaoMaisRecente = transacoes[0];
        console.log(`üîç Atualizando transa√ß√£o mais recente: ${transacaoMaisRecente.id}`);
        
        const { error: erroAtualizacao } = await supabase
          .from('financeiro_transacoes')
          .update({ 
            valor: VALOR_CORRETO,
            atualizado_em: new Date().toISOString()
          })
          .eq('id', transacaoMaisRecente.id);
        
        if (erroAtualizacao) {
          console.error('‚ùå Erro ao atualizar transa√ß√£o mais recente:', erroAtualizacao.message);
        } else {
          console.log('‚úÖ Transa√ß√£o mais recente atualizada com sucesso!');
        }
        
        // Remover as transa√ß√µes duplicadas
        console.log('üóëÔ∏è Removendo transa√ß√µes duplicadas...');
        
        for (let i = 1; i < transacoes.length; i++) {
          const { error: erroRemocao } = await supabase
            .from('financeiro_transacoes')
            .delete()
            .eq('id', transacoes[i].id);
          
          if (erroRemocao) {
            console.error(`‚ùå Erro ao remover transa√ß√£o ${transacoes[i].id}:`, erroRemocao.message);
          } else {
            console.log(`‚úÖ Transa√ß√£o ${transacoes[i].id} removida com sucesso!`);
          }
        }
      }
    }
    
    console.log('\n‚úÖ Corre√ß√£o do card Frederico conclu√≠da!');
    console.log('üîÑ Recarregue a p√°gina para ver as altera√ß√µes.');
    
  } catch (erro) {
    console.error('\n‚ùå Erro durante a corre√ß√£o:', erro);
  }
}

// Fun√ß√£o para criar uma nova transa√ß√£o financeira
async function criarTransacaoCorreta(evento, valor) {
  console.log(`üîß Criando nova transa√ß√£o financeira com valor correto: R$ ${valor.toFixed(2)}`);
  
  const dataEvento = new Date(evento.data_inicio || new Date());
  
  const novaTransacao = {
    id: uuidv4(),
    descricao: `Entrada - ${evento.tipo || 'Casamento'} (${evento.titulo})`,
    valor,
    tipo: 'receita',
    status: 'recebido',
    data_transacao: new Date().toISOString(),
    categoria: 'Entrada de Evento',
    observacoes: `Valor de entrada para evento do tipo "${evento.tipo || 'Casamento'}" agendado para ${dataEvento.toLocaleDateString()}. ID do evento: ${evento.id}`,
    user_id: evento.user_id,
    clienteName: evento.titulo,
    data_evento: evento.data_inicio,
    criado_em: new Date().toISOString(),
    atualizado_em: new Date().toISOString()
  };
  
  const { data, error } = await supabase
    .from('financeiro_transacoes')
    .insert([novaTransacao])
    .select();
  
  if (error) {
    console.error('‚ùå Erro ao criar transa√ß√£o:', error.message);
  } else {
    console.log('‚úÖ Transa√ß√£o financeira criada com sucesso!');
  }
}

// Executar a corre√ß√£o
corrigirEventoFrederico().catch(console.error); 