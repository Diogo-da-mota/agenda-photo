
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://rggswsvrywyvmffgozpj.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InJnZ3N3c3ZyeXd5dm1mZmdvenBqIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDIwNjI3NDIsImV4cCI6MjA1NzYzODc0Mn0.LBeo7mmw30uX1HTF4_IN0HvjJjKy5IlDHQKQV7lVhPk";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

/**
 * Check if a table exists in the database
 * @param tableName Name of the table to check
 * @returns Boolean indicating if the table exists
 */
export const checkTableExists = async (tableName: string): Promise<boolean> => {
  try {
    console.log(`Checking if table '${tableName}' exists...`);
    
    // Para mensagens_de_contato, a tabela que queremos verificar
    if (tableName === 'mensagens_de_contato') {
      const { data, error } = await supabase
        .from('mensagens_de_contato')
        .select('*')
        .limit(1);
        
      if (error && error.message.includes('relation') && error.message.includes('does not exist')) {
        return false;
      }
      return !error;
    } 
    // Manter compatibilidade com outros nomes de tabela
    else if (tableName === 'contact_messages') {
      // Using any type here to bypass type checking since contact_messages is not in the types
      const { data, error } = await (supabase as any)
        .from('contact_messages')
        .select('*')
        .limit(1);
        
      if (error && error.message.includes('relation') && error.message.includes('does not exist')) {
        return false;
      }
      return !error;
    }
    
    return false;
  } catch (error) {
    console.error('Error checking if table exists:', error);
    return false;
  }
};

/**
 * Create the contact_messages table in the database
 * @returns Boolean indicating success of table creation
 */
export const createContactMessagesTable = async (): Promise<boolean> => {
  try {
    console.log('Attempting to create contact_messages table...');
    
    // Call the stored procedure to create the table
    // Using any type here to bypass type checking since ensure_contact_messages_table exists in the DB but not in types
    const { data, error } = await (supabase as any).rpc('ensure_contact_messages_table');
    
    if (error) {
      console.error('Error creating contact_messages table:', error.message);
      return false;
    }
    
    console.log('ensure_contact_messages_table response:', data);
    return true;
  } catch (error) {
    console.error('Error creating contact_messages table:', error);
    return false;
  }
};

/**
 * Make a direct test submission to mensagens_de_contato table
 * @returns Boolean indicating success of submission
 */
export const testSubmitMensagem = async (): Promise<boolean> => {
  const testData = {
    nome: "Teste de Integração",
    e_mail: "teste@exemplo.com",
    telefone: "11999999999",
    mensagem: "Este é um teste de integração com o Supabase."
    // criado_em is automatically set by DEFAULT now()
  };
  
  try {
    console.log('Fazendo envio de teste para mensagens_de_contato:', testData);
    
    const { data, error } = await supabase
      .from('mensagens_de_contato')
      .insert(testData)
      .select();
    
    if (error) {
      console.error('Erro ao fazer teste de envio:', error);
      return false;
    }
    
    console.log('Teste de envio bem-sucedido:', data);
    return true;
  } catch (error) {
    console.error('Exceção ao fazer teste de envio:', error);
    return false;
  }
};
