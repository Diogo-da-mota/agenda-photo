
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://rggswsvrywyvmffgozpj.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InJnZ3N3c3ZyeXd5dm1mZmdvenBqIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDIwNjI3NDIsImV4cCI6MjA1NzYzODc0Mn0.LBeo7mmw30uX1HTF4_IN0HvjJjKy5IlDHQKQV7lVhPk";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

/**
 * Check if a table exists in the database
 * @param tableName Name of the table to check
 * @returns Boolean indicating if the table exists
 */
export const checkTableExists = async (tableName: string): Promise<boolean> => {
  try {
    console.log(`Checking if table '${tableName}' exists...`);
    
    // For type safety, we need to check if the table name is one we expect
    if (tableName === 'contact_messages') {
      // Try to query the table to see if it exists and is accessible
      const { data, error } = await supabase
        .from('contact_messages')
        .select('*')
        .limit(1);
        
      if (error) {
        console.log(`Error querying table '${tableName}':`, error.message);
        
        // If the error is "relation does not exist", the table definitely doesn't exist
        if (error.message.includes('relation') && error.message.includes('does not exist')) {
          return false;
        }
      } else {
        console.log(`Table '${tableName}' exists and is accessible.`);
        return true;
      }
    } else if (tableName === 'mensagens_de_contato') {
      // Try to query the table
      const { data, error } = await supabase
        .from('mensagens_de_contato')
        .select('*')
        .limit(1);
        
      if (error) {
        console.log(`Error querying table '${tableName}':`, error.message);
        
        if (error.message.includes('relation') && error.message.includes('does not exist')) {
          return false;
        }
      } else {
        console.log(`Table '${tableName}' exists and is accessible.`);
        return true;
      }
    }
    
    // If the query approach didn't give a definitive answer, try using the RPC function
    // Only applicable for contact_messages
    if (tableName === 'contact_messages') {
      const { data: tableInfo, error: tableError } = await supabase
        .rpc('ensure_contact_messages_table');
        
      if (tableError) {
        console.log('Error checking table existence via RPC:', tableError.message);
        return false;
      }
      
      return !!tableInfo;
    }
    
    return false;
  } catch (error) {
    console.error('Error checking if table exists:', error);
    return false;
  }
};

/**
 * Create the contact_messages table in the database
 * @returns Boolean indicating success of table creation
 */
export const createContactMessagesTable = async (): Promise<boolean> => {
  try {
    console.log('Attempting to create contact_messages table...');
    
    // Call the stored procedure to create the table
    const { data, error } = await supabase.rpc('ensure_contact_messages_table');
    
    if (error) {
      console.error('Error creating contact_messages table:', error.message);
      return false;
    }
    
    console.log('ensure_contact_messages_table response:', data);
    return true;
  } catch (error) {
    console.error('Error creating contact_messages table:', error);
    return false;
  }
};
