// Script de diagn√≥stico para verificar e corrigir a inconsist√™ncia entre eventos e transa√ß√µes financeiras
// Execute usando: node src/scripts/diagnose-event.js

const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

// Inicializar cliente Supabase
const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY;
const supabase = createClient(supabaseUrl, supabaseKey);

// Fun√ß√£o para converter string de data para objeto Date
const parseDataEvento = (dataString) => {
  if (!dataString) return new Date();
  try {
    return new Date(dataString);
  } catch (e) {
    console.error('Erro ao converter data:', e);
    return new Date();
  }
};

// Fun√ß√£o para extrair valores financeiros de texto de observa√ß√µes
const extrairValoresFinanceiros = (observacoes) => {
  if (!observacoes) {
    return { totalValue: 0, downPayment: 0, remainingValue: 0, notes: '' };
  }

  const valorTotalMatch = observacoes.match(/Valor Total: R\$(\d+(\.\d+)?)/);
  const entradaMatch = observacoes.match(/Entrada: R\$(\d+(\.\d+)?)/);
  const valorRestanteMatch = observacoes.match(/Valor Restante: R\$(\d+(\.\d+)?)/);

  const totalValue = valorTotalMatch ? parseFloat(valorTotalMatch[1]) : 0;
  const downPayment = entradaMatch ? parseFloat(entradaMatch[1]) : 0;
  const remainingValue = valorRestanteMatch ? parseFloat(valorRestanteMatch[1]) : 0;

  // Remove as linhas de valores das observa√ß√µes para obter apenas as notas
  const notes = observacoes
    .replace(/Valor Total: R\$\d+(\.\d+)?(\n|$)/, '')
    .replace(/Entrada: R\$\d+(\.\d+)?(\n|$)/, '')
    .replace(/Valor Restante: R\$\d+(\.\d+)?(\n|$)/, '')
    .trim();

  return { totalValue, downPayment, remainingValue, notes };
};

// Fun√ß√£o para verificar um evento espec√≠fico
async function verificarEvento(eventoId) {
  console.log(`\nüîç Verificando evento ID: ${eventoId}`);
  
  // 1. Buscar o evento
  const { data: evento, error: erroEvento } = await supabase
    .from('agenda_eventos')
    .select('*')
    .eq('id', eventoId)
    .single();
  
  if (erroEvento) {
    console.error('‚ùå Erro ao buscar evento:', erroEvento.message);
    return;
  }
  
  console.log(`‚úÖ Evento encontrado: ${evento.titulo}`);
  console.log(`üìù Observa√ß√µes: ${evento.observacoes}`);
  
  // 2. Extrair valores financeiros das observa√ß√µes
  const valoresEvento = extrairValoresFinanceiros(evento.observacoes);
  console.log('üí∞ Valores no evento:');
  console.log(`   - Valor Total: R$ ${valoresEvento.totalValue.toFixed(2)}`);
  console.log(`   - Entrada: R$ ${valoresEvento.downPayment.toFixed(2)}`);
  console.log(`   - Valor Restante: R$ ${valoresEvento.remainingValue.toFixed(2)}`);
  
  // 3. Buscar transa√ß√µes financeiras relacionadas a este evento
  const { data: transacoes, error: erroTransacoes } = await supabase
    .from('financeiro_transacoes')
    .select('*')
    .eq('categoria', 'Entrada de Evento')
    .ilike('observacoes', `%${eventoId}%`);
  
  if (erroTransacoes) {
    console.error('‚ùå Erro ao buscar transa√ß√µes:', erroTransacoes.message);
    return;
  }
  
  // 4. Verificar transa√ß√µes encontradas
  if (!transacoes || transacoes.length === 0) {
    console.log('‚ö†Ô∏è N√£o foram encontradas transa√ß√µes financeiras para este evento.');
    
    // Criar transa√ß√£o se necess√°rio
    if (valoresEvento.downPayment > 0) {
      console.log('üîß Criando transa√ß√£o financeira para o evento...');
      await criarTransacaoFinanceira(evento, valoresEvento);
    }
    return;
  }
  
  console.log(`üìä Encontradas ${transacoes.length} transa√ß√µes relacionadas:`);
  
  // 5. Exibir e comparar os valores
  let totalTransacoes = 0;
  transacoes.forEach((transacao, i) => {
    console.log(`\nüìå Transa√ß√£o ${i+1}: ${transacao.descricao}`);
    console.log(`   - ID: ${transacao.id}`);
    console.log(`   - Valor: R$ ${transacao.valor.toFixed(2)}`);
    console.log(`   - Criada em: ${new Date(transacao.criado_em).toLocaleString()}`);
    console.log(`   - Observa√ß√µes: ${transacao.observacoes}`);
    
    totalTransacoes += transacao.valor;
  });
  
  console.log('\nüìä Compara√ß√£o:');
  console.log(`   - Valor de entrada no evento: R$ ${valoresEvento.downPayment.toFixed(2)}`);
  console.log(`   - Soma das transa√ß√µes: R$ ${totalTransacoes.toFixed(2)}`);
  
  // 6. Verificar inconsist√™ncia
  if (Math.abs(valoresEvento.downPayment - totalTransacoes) > 0.01) {
    console.log('\n‚ö†Ô∏è INCONSIST√äNCIA DETECTADA: Os valores n√£o coincidem!');
    
    const respostaContinuar = await pergunta('\nüîÑ Deseja corrigir esta inconsist√™ncia? (s/n): ');
    if (respostaContinuar.toLowerCase() === 's') {
      await corrigirInconsistencia(evento, valoresEvento, transacoes);
    }
  } else {
    console.log('\n‚úÖ Os valores est√£o consistentes entre evento e transa√ß√µes.');
  }
}

// Fun√ß√£o para criar uma transa√ß√£o financeira
async function criarTransacaoFinanceira(evento, valoresEvento) {
  const { v4: uuidv4 } = require('uuid');
  const dataEvento = parseDataEvento(evento.data_inicio);
  
  const novaTransacao = {
    id: uuidv4(),
    descricao: `Entrada - ${evento.tipo || 'Evento'} (${evento.titulo})`,
    valor: valoresEvento.downPayment,
    tipo: 'receita',
    status: 'recebido',
    data_transacao: new Date().toISOString(),
    categoria: 'Entrada de Evento',
    observacoes: `Valor de entrada para evento do tipo "${evento.tipo || 'Evento'}" agendado para ${dataEvento.toLocaleDateString()}. ID do evento: ${evento.id}`,
    user_id: evento.user_id,
    clienteName: evento.titulo,
    data_evento: evento.data_inicio,
    criado_em: new Date().toISOString(),
    atualizado_em: new Date().toISOString()
  };
  
  const { data, error } = await supabase
    .from('financeiro_transacoes')
    .insert([novaTransacao])
    .select();
  
  if (error) {
    console.error('‚ùå Erro ao criar transa√ß√£o:', error);
  } else {
    console.log('‚úÖ Transa√ß√£o financeira criada com sucesso!');
  }
}

// Fun√ß√£o para corrigir inconsist√™ncia entre evento e transa√ß√µes
async function corrigirInconsistencia(evento, valoresEvento, transacoes) {
  // Estrat√©gia: Atualizar o valor da transa√ß√£o para corresponder ao valor de entrada do evento
  
  if (transacoes.length === 1) {
    // Caso mais comum: uma transa√ß√£o com valor diferente
    const transacao = transacoes[0];
    
    console.log(`üîß Atualizando valor da transa√ß√£o de R$ ${transacao.valor} para R$ ${valoresEvento.downPayment}`);
    
    const { error } = await supabase
      .from('financeiro_transacoes')
      .update({ 
        valor: valoresEvento.downPayment,
        atualizado_em: new Date().toISOString()
      })
      .eq('id', transacao.id);
    
    if (error) {
      console.error('‚ùå Erro ao atualizar transa√ß√£o:', error);
    } else {
      console.log('‚úÖ Transa√ß√£o atualizada com sucesso!');
    }
    
  } else if (transacoes.length > 1) {
    // Caso complexo: m√∫ltiplas transa√ß√µes
    console.log('‚ö†Ô∏è M√∫ltiplas transa√ß√µes encontradas. Recomenda√ß√£o:');
    console.log('   1. Manter apenas a transa√ß√£o mais recente');
    console.log('   2. Atualizar seu valor para corresponder ao valor de entrada do evento');
    
    // Ordenar transa√ß√µes por data (mais recente primeiro)
    transacoes.sort((a, b) => new Date(b.criado_em) - new Date(a.criado_em));
    
    const transacaoMaisRecente = transacoes[0];
    console.log(`\nüîç Transa√ß√£o mais recente: ${transacaoMaisRecente.id} (${new Date(transacaoMaisRecente.criado_em).toLocaleString()})`);
    
    const respostaAtualizar = await pergunta('\nüîÑ Atualizar valor desta transa√ß√£o? (s/n): ');
    if (respostaAtualizar.toLowerCase() === 's') {
      // Atualizar transa√ß√£o mais recente
      const { error: erroAtualizacao } = await supabase
        .from('financeiro_transacoes')
        .update({ 
          valor: valoresEvento.downPayment,
          atualizado_em: new Date().toISOString()
        })
        .eq('id', transacaoMaisRecente.id);
      
      if (erroAtualizacao) {
        console.error('‚ùå Erro ao atualizar transa√ß√£o:', erroAtualizacao);
      } else {
        console.log('‚úÖ Transa√ß√£o atualizada com sucesso!');
      }
      
      // Perguntar se deseja remover as outras transa√ß√µes
      const respostaRemover = await pergunta('\nüóëÔ∏è Remover as transa√ß√µes duplicadas? (s/n): ');
      if (respostaRemover.toLowerCase() === 's') {
        for (let i = 1; i < transacoes.length; i++) {
          const { error: erroRemocao } = await supabase
            .from('financeiro_transacoes')
            .delete()
            .eq('id', transacoes[i].id);
          
          if (erroRemocao) {
            console.error(`‚ùå Erro ao remover transa√ß√£o ${transacoes[i].id}:`, erroRemocao);
          } else {
            console.log(`‚úÖ Transa√ß√£o ${transacoes[i].id} removida com sucesso!`);
          }
        }
      }
    }
  }
}

// Fun√ß√£o para entrada do usu√°rio (readline)
function pergunta(texto) {
  const readline = require('readline');
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });

  return new Promise(resolve => {
    rl.question(texto, (resposta) => {
      rl.close();
      resolve(resposta);
    });
  });
}

// Fun√ß√£o principal
async function main() {
  console.log('üîç DIAGN√ìSTICO DE INCONSIST√äNCIA ENTRE EVENTOS E TRANSA√á√ïES');
  console.log('========================================================');
  
  // Obter ID do evento para diagn√≥stico
  const eventoId = process.argv[2];
  
  if (!eventoId) {
    console.log('\n‚ùå Voc√™ precisa fornecer o ID do evento como argumento.');
    console.log('Exemplo: node src/scripts/diagnose-event.js SEU_ID_EVENTO');
    return;
  }
  
  try {
    await verificarEvento(eventoId);
    console.log('\n‚úÖ Diagn√≥stico conclu√≠do!');
  } catch (error) {
    console.error('\n‚ùå Erro durante o diagn√≥stico:', error);
  }
}

// Executar o script
main().catch(console.error); 