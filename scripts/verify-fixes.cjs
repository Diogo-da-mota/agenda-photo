const fs = require('fs');
const path = require('path');

async function verifyFixes() {
  console.log('üîç VERIFICANDO CORRE√á√ïES APLICADAS...\n');
  
  let allTestsPassed = true;
  const results = [];
  
  // TESTE 1: Verificar se tipos TypeScript foram corrigidos
  console.log('1. üî∑ Verificando tipos TypeScript...');
  try {
    const typesFile = path.join(__dirname, '../src/integrations/supabase/types.ts');
    const typesContent = fs.readFileSync(typesFile, 'utf8');
    
    const hasOldColumns = typesContent.includes('url_imagem_drive') || typesContent.includes('urls_drive');
    
    if (hasOldColumns) {
      console.log('   ‚ùå Tipos ainda cont√™m colunas antigas');
      results.push('‚ùå Tipos TypeScript - Colunas antigas encontradas');
      allTestsPassed = false;
    } else {
      console.log('   ‚úÖ Tipos TypeScript corrigidos');
      results.push('‚úÖ Tipos TypeScript - Colunas antigas removidas');
    }
  } catch (error) {
    console.log('   ‚ùå Erro ao verificar tipos:', error.message);
    results.push('‚ùå Tipos TypeScript - Erro na verifica√ß√£o');
    allTestsPassed = false;
  }
  
  // TESTE 2: Verificar se hook useUserRole foi corrigido
  console.log('\n2. üé£ Verificando hook useUserRole...');
  try {
    const hookFile = path.join(__dirname, '../src/hooks/useUserRole.ts');
    const hookContent = fs.readFileSync(hookFile, 'utf8');
    
    const hasMaybeSingle = hookContent.includes('maybeSingle()');
    const hasSingle = hookContent.includes('.single()');
    
    if (hasMaybeSingle && !hasSingle) {
      console.log('   ‚úÖ Hook useUserRole corrigido');
      results.push('‚úÖ Hook useUserRole - Usando maybeSingle()');
    } else {
      console.log('   ‚ùå Hook useUserRole ainda usa single()');
      results.push('‚ùå Hook useUserRole - Ainda usando single()');
      allTestsPassed = false;
    }
  } catch (error) {
    console.log('   ‚ùå Erro ao verificar hook:', error.message);
    results.push('‚ùå Hook useUserRole - Erro na verifica√ß√£o');
    allTestsPassed = false;
  }
  
  // TESTE 3: Verificar se script verify-tables foi corrigido
  console.log('\n3. üìã Verificando script verify-tables...');
  try {
    const scriptFile = path.join(__dirname, 'verify-tables.js');
    const scriptContent = fs.readFileSync(scriptFile, 'utf8');
    
    const hasNewColumns = scriptContent.includes('imagens') && scriptContent.includes('imagem_capa');
    const hasOldColumns = scriptContent.includes('urls_drive') || scriptContent.includes('url_imagem_drive');
    
    if (hasNewColumns && !hasOldColumns) {
      console.log('   ‚úÖ Script verify-tables corrigido');
      results.push('‚úÖ Script verify-tables - Usando nomes corretos');
    } else {
      console.log('   ‚ùå Script verify-tables ainda usa nomes antigos');
      results.push('‚ùå Script verify-tables - Nomes antigos encontrados');
      allTestsPassed = false;
    }
  } catch (error) {
    console.log('   ‚ùå Erro ao verificar script:', error.message);
    results.push('‚ùå Script verify-tables - Erro na verifica√ß√£o');
    allTestsPassed = false;
  }
  
  // TESTE 4: Verificar se queries est√£o usando nomes corretos
  console.log('\n4. üîç Verificando queries nos arquivos...');
  try {
    const filesToCheck = [
      '../src/hooks/usePortfolio.tsx',
      '../src/services/portfolio/queries/publicQueries.ts',
      '../src/services/portfolio/queries/basicQueries.ts'
    ];
    
    let hasProblems = false;
    
    for (const filePath of filesToCheck) {
      const fullPath = path.join(__dirname, filePath);
      if (fs.existsSync(fullPath)) {
        const content = fs.readFileSync(fullPath, 'utf8');
        if (content.includes('url_imagem_drive') || content.includes('urls_drive')) {
          console.log(`   ‚ùå Arquivo ${filePath} ainda usa colunas antigas`);
          hasProblems = true;
        }
      }
    }
    
    if (!hasProblems) {
      console.log('   ‚úÖ Queries usando nomes corretos');
      results.push('‚úÖ Queries - Usando nomes corretos das colunas');
    } else {
      console.log('   ‚ùå Algumas queries ainda usam nomes antigos');
      results.push('‚ùå Queries - Nomes antigos encontrados');
      allTestsPassed = false;
    }
  } catch (error) {
    console.log('   ‚ùå Erro ao verificar queries:', error.message);
    results.push('‚ùå Queries - Erro na verifica√ß√£o');
    allTestsPassed = false;
  }
  
  // RESULTADO FINAL
  console.log('\n' + '='.repeat(50));
  console.log('üìä RESULTADO FINAL:');
  console.log('='.repeat(50));
  
  results.forEach(result => {
    console.log(result);
  });
  
  if (allTestsPassed) {
    console.log('\nüéâ TODAS AS CORRE√á√ïES FORAM APLICADAS COM SUCESSO!');
    console.log('‚úÖ Os erros de url_imagem_drive e urls_drive foram corrigidos');
    console.log('‚úÖ O erro 406 do useUserRole foi corrigido');
    console.log('‚úÖ O projeto est√° pronto para uso');
    console.log('\nüöÄ PR√ìXIMOS PASSOS:');
    console.log('1. Reinicie o servidor de desenvolvimento');
    console.log('2. Limpe o cache do navegador');
    console.log('3. Teste a rota /portfolio');
    console.log('4. Teste o login para verificar se n√£o h√° mais erro 406');
  } else {
    console.log('\n‚ö†Ô∏è  ALGUMAS CORRE√á√ïES PRECISAM DE ATEN√á√ÉO');
    console.log('‚ùå Verifique os itens marcados com ‚ùå acima');
    console.log('üìù Execute as corre√ß√µes necess√°rias');
  }
  
  return allTestsPassed;
}

// Executar se chamado diretamente
if (require.main === module) {
  verifyFixes();
}

module.exports = { verifyFixes }; 